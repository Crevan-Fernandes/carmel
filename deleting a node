#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void insert_at_beginning(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    if (head == NULL) {
        head = new_node;
        new_node->next = NULL;
        return;
    }
    new_node->next = head;
    head = new_node;
}

void insert_at_end(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* ptr = head;
    new_node->data = data;

    if (head == NULL) {
        head = new_node;
        new_node->next = NULL;
        return;
    }

    while (ptr->next != NULL) {
        ptr = ptr->next;
    }
    ptr->next = new_node;
    new_node->next = NULL;
}

void delete_from_start() {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct Node* ptr = head;
    head = head->next;
    free(ptr);
}

void delete_from_end() {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* ptr = head;
    struct Node* prev = NULL;

    if (ptr->next == NULL) { // If there is only one node
        free(ptr);
        head = NULL;
        return;
    }

    while (ptr->next != NULL) {
        prev = ptr;
        ptr = ptr->next;
    }

    prev->next = NULL;
    free(ptr);
}

void delete_from_pos(int pos) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    if (pos < 1) {
        printf("Invalid position.\n");
        return;
    }

    struct Node* ptr = head;
    struct Node* prev = NULL;

    if (pos == 1) {
        head = ptr->next;
        free(ptr);
        return;
    }

    for (int i = 1; ptr != NULL && i < pos; i++) {
        prev = ptr;
        ptr = ptr->next;
    }

    if (ptr == NULL) {
        printf("Position out of range.\n");
        return;
    }

    prev->next = ptr->next;
    free(ptr);
}

void display() {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct Node* ptr = head;
    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

int main() {
    int choice, data, i = 1;
    printf("1. Insert at beginning\n");
    printf("2. Insert at end\n");
    printf("3. Delete from beginning\n");
    printf("4. Delete from end\n");
    printf("5. Delete from specific position\n");
    printf("6. Display\n");
    printf("7. Exit\n");

    while (i == 1) {
        printf("Enter the choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the value: ");
                scanf("%d", &data);
                insert_at_beginning(data);
                break;
            case 2:
                printf("Enter the value: ");
                scanf("%d", &data);
                insert_at_end(data);
                break;
            case 3:
                delete_from_start();
                break;
            case 4:
                delete_from_end();
                break;
            case 5:
                printf("Enter the position: ");
                scanf("%d", &data);
                delete_from_pos(data);
                break;
            case 6:
                display();
                break;
            case 7:
                i = 0;
                break;
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}
